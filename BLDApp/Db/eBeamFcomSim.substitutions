#
# Sample substitutions file to create and send dummy fcom blob groups
#
# Data values alternate between sin and cos calc records
# advancing 1 degree per upate at 120hz
#

# Each fcomBlobSim.template can be used to assign
# alternating SIN and COS values to each value in the blob,
# for up to 10 values per blob
#
# Blob macros here should truncate the value name and end w/ a colon
# i.e. BPMS:LTU0:910: instead of BPMS:LTU0:910:X 
# 
# The first blob in each group should define these macros
# to initiate processing of each blob where EC must be
# defined later via a dbLoadRecord macro.
#		SCAN	= "Event",	EC = "\$(EC)"
#
# Each blob in a group should specify the next
# blob in the group via a NEXT macro to force them to
# be processed sequentially.
# Set NEXT to the next blob's root plus SIM_SEQ
# Ex:		NEXT	= "BPMS:DMPH:502:SIM_SEQ"
#
# Leave NEXT undefined for the last blob in the group
# and it will default to an FLNK to the group's send record
file fcomBlobBPMS_SIM.db
{
# Group 2, 1 blobs
	{
		GROUP	= "2",
		SCAN	= "Event",	EC = "\$(EC)"
		BLOB	= "BPMS:IN20:221:",
	}
# Group 3, 1 blob
	{
		GROUP	= "3",
		SCAN	= "Event",	EC = "\$(EC)"
		BLOB	= "BPMS:LI21:233:",
	}
# Group 4, 1 blob
	{
		GROUP	= "4",
		SCAN	= "Event",	EC = "\$(EC)"
		BLOB	= "BPMS:LI24:801:",
	}
}

file fcomBlobBPMS_SIM.db
{
# Group 5, 6 blobs
	{
		GROUP	= "5",
		SCAN	= "Event",	EC = "\$(EC)"
		BLOB	= "BPMS:LTUH:250:",
		NEXT	= "BPMS:LTUH:450:SIM_SEQ"
	}
	{
		GROUP	= "5",
		BLOB	= "BPMS:LTUH:450:",
		NEXT	= "BPMS:LTUH:720:SIM_SEQ"
	}
	{
		GROUP	= "5",
		BLOB	= "BPMS:LTUH:720:",
		NEXT	= "BPMS:LTUH:730:SIM_SEQ",
	}
	{
		GROUP	= "5",
		BLOB	= "BPMS:LTUH:730:",
		NEXT	= "BPMS:LTUH:740:SIM_SEQ",
	}
	{
		GROUP	= "5",
		BLOB	= "BPMS:LTUH:740:",
		NEXT	= "BPMS:LTUH:750:SIM_SEQ",
	}
	{
		GROUP	= "5",
		BLOB	= "BPMS:LTUH:750:",
		NEXT	= "BPMS:LTUH:750:ALL_SEND",
	}
}

file fcomBlobBPMS_SIM.db
{
# Group 7, 1 blobs
	{
		GROUP	= "7",
		SCAN	= "Event",	EC = "\$(EC)"
		BLOB	= "BPMS:DMPH:502:",
	}
}

file fcomBlobBLEN_SIM.db
{
# Group 8, 1 blob
	{
		GROUP	= "8",
		SCAN	= "Event",	EC = "\$(EC)"
		BLOB	= "BLEN:LI21:265:",
	}
# Group 9, 1 blob
	{
		GROUP	= "9",
		SCAN	= "Event",	EC = "\$(EC)"
		BLOB	= "BLEN:LI24:886:",
	}
}

file fcomBlobFBCK_SIM.db
{
# Group 10, 1 blob
	{
		GROUP	= "10",
		SCAN	= "Event",	EC = "\$(EC)"
		BLOB	= "FBCK:FB05:TR05:",
	}
}

# Each group needs a SEND record
# LAST should match the truncated BLOB macro
# from above for the last blob in the group
file fcomGroupSend.template
{
	{
		GROUP	= "2",
		LAST	= "BPMS:IN20:221:",
	}
	{
		GROUP	= "3",
		LAST	= "BPMS:LI21:233:",
	}
	{
		GROUP	= "4",
		LAST	= "BPMS:LI24:801:",
	}
	{
		GROUP	= "5",
		LAST	= "BPMS:LTUH:750:",
	}
	{
		GROUP	= "7",
		LAST	= "BPMS:DMPH:502:",
	}
	{
		GROUP	= "8",
		LAST	= "BLEN:LI21:265:",
	}
	{
		GROUP	= "9",
		LAST	= "BLEN:LI24:886:",
	}
	{
		GROUP	= "10",
		LAST	= "FBCK:FB05:TR05:",
	}
}

