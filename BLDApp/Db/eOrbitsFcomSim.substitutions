#
# Sample substitutions file to create and send dummy fcom blob groups
#
# Data values alternate between sin and cos calc records
# advancing 1 degree per upate at 120hz
#

file fcomBlobAo.template
{
	pattern
	{	P,			SIM,	INDEX,	GROUP,	BLOB				}
	{	"$(BLOB)",	"_SIM",		0,		0,	BPMS:LTUH:910:X		}
	{	"$(BLOB)",	"_SIM",		1,		0,	BPMS:LTUH:910:Y		}
	{	"$(BLOB)",	"_SIM",		2,		0,	BPMS:LTUH:910:T		}

	{	"$(BLOB)",	"_SIM",		0,		0,	BPMS:LTUH:960:X		}
	{	"$(BLOB)",	"_SIM",		1,		0,	BPMS:LTUH:960:Y		}
	{	"$(BLOB)",	"_SIM",		2,		0,	BPMS:LTUH:960:T		}

	{	"$(BLOB)",	"_SIM",		0,		0,	BPMS:UNDH:100:X		}
	{	"$(BLOB)",	"_SIM",		1,		0,	BPMS:UNDH:100:Y		}
	{	"$(BLOB)",	"_SIM",		2,		0,	BPMS:UNDH:100:T		}

	{	"$(BLOB)",	"_SIM",		0,		0,	BPMS:UNDH:190:X		}
	{	"$(BLOB)",	"_SIM",		1,		0,	BPMS:UNDH:190:Y		}
	{	"$(BLOB)",	"_SIM",		2,		0,	BPMS:UNDH:190:T		}

	{	"$(BLOB)",	"_SIM",		0,		0,	BPMS:UNDH:290:X		}
	{	"$(BLOB)",	"_SIM",		1,		0,	BPMS:UNDH:290:Y		}
	{	"$(BLOB)",	"_SIM",		2,		0,	BPMS:UNDH:290:T		}

	{	"$(BLOB)",	"_SIM",		0,		0,	BPMS:UNDH:390:X		}
	{	"$(BLOB)",	"_SIM",		1,		0,	BPMS:UNDH:390:Y		}
	{	"$(BLOB)",	"_SIM",		2,		0,	BPMS:UNDH:390:T		}

	{	"$(BLOB)",	"_SIM",		0,		1,	BPMS:UNDH:490:X		}
	{	"$(BLOB)",	"_SIM",		1,		1,	BPMS:UNDH:490:Y		}
	{	"$(BLOB)",	"_SIM",		2,		1,	BPMS:UNDH:490:T		}

	{	"$(BLOB)",	"_SIM",		0,		1,	BPMS:UNDH:590:X		}
	{	"$(BLOB)",	"_SIM",		1,		1,	BPMS:UNDH:590:Y		}
	{	"$(BLOB)",	"_SIM",		2,		1,	BPMS:UNDH:590:T		}

	{	"$(BLOB)",	"_SIM",		0,		1,	BPMS:UNDH:690:X		}
	{	"$(BLOB)",	"_SIM",		1,		1,	BPMS:UNDH:690:Y		}
	{	"$(BLOB)",	"_SIM",		2,		1,	BPMS:UNDH:690:T		}

	{	"$(BLOB)",	"_SIM",		0,		1,	BPMS:UNDH:790:X		}
	{	"$(BLOB)",	"_SIM",		1,		1,	BPMS:UNDH:790:Y		}
	{	"$(BLOB)",	"_SIM",		2,		1,	BPMS:UNDH:790:T		}

	{	"$(BLOB)",	"_SIM",		0,		1,	BPMS:UNDH:890:X		}
	{	"$(BLOB)",	"_SIM",		1,		1,	BPMS:UNDH:890:Y		}
	{	"$(BLOB)",	"_SIM",		2,		1,	BPMS:UNDH:890:T		}

	{	"$(BLOB)",	"_SIM",		0,		1,	BPMS:UNDH:990:X		}
	{	"$(BLOB)",	"_SIM",		1,		1,	BPMS:UNDH:990:Y		}
	{	"$(BLOB)",	"_SIM",		2,		1,	BPMS:UNDH:990:T		}

}

#file fcomBlobAdd.template
#{
#	pattern
#	{	P,			R,		GROUP,	BLOB				}
#	{	"$(BLOB)",	"_ADD",		0,	BPMS:LTUH:910:ALL	}
#	{	"$(BLOB)",	"_ADD",		0,	BPMS:LTUH:960:ALL	}
#	{	"$(BLOB)",	"_ADD",		0,	BPMS:UNDH:100:ALL	}
#	{	"$(BLOB)",	"_ADD",		0,	BPMS:UNDH:190:ALL	}
#	{	"$(BLOB)",	"_ADD",		0,	BPMS:UNDH:290:ALL	}
#	{	"$(BLOB)",	"_ADD",		0,	BPMS:UNDH:390:ALL	}
#
#	{	"$(BLOB)",	"_ADD",		1,	BPMS:UNDH:490:ALL	}
#	{	"$(BLOB)",	"_ADD",		1,	BPMS:UNDH:590:ALL	}
#	{	"$(BLOB)",	"_ADD",		1,	BPMS:UNDH:690:ALL	}
#	{	"$(BLOB)",	"_ADD",		1,	BPMS:UNDH:790:ALL	}
#	{	"$(BLOB)",	"_ADD",		1,	BPMS:UNDH:890:ALL	}
#	{	"$(BLOB)",	"_ADD",		1,	BPMS:UNDH:990:ALL	}
#}


# Each fcomBlobBPMS_SIM.db can be used to assign
# alternating SIN and COS values to each value in the blob,
# for up to 10 values per blob
#
# Blob macros here should truncate the value name and end w/ a colon
# i.e. BPMS:LTU0:910: instead of BPMS:LTU0:910:X 
# 
# The first blob in each group should define these macros
# to initiate processing of each blob where EC must be
# defined later via a dbLoadRecord macro.
#		SCAN	= "Event",	EC = "\$(EC)"
#
# Each blob in a group should specify the next
# blob in the group via a NEXT macro to force them to
# be processed sequentially.
# Leave NEXT undefined for the last blob in the group
# and it will default an FLNK to the group's send record
file fcomBlobBPMS_SIM.db
{
# group 0, 12 blobs
	{
		GROUP	= "0",
		SCAN	= "Event",	EC = "\$(EC)"
		BLOB	= "BPMS:LTUH:910:",
		NEXT	= "BPMS:LTUH:960:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:LTUH:960:",
		NEXT	= "BPMS:UNDH:100:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:UNDH:100:",
		NEXT	= "BPMS:UNDH:190:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:UNDH:190:",
		NEXT	= "BPMS:UNDH:290:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:UNDH:290:",
		NEXT	= "BPMS:UNDH:390:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:UNDH:390:",
		NEXT	= "BPMS:UNDH:490:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:UNDH:490:",
		NEXT	= "BPMS:UNDH:590:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:UNDH:590:",
		NEXT	= "BPMS:UNDH:690:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:UNDH:690:",
		NEXT	= "BPMS:UNDH:790:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:UNDH:790:",
		NEXT	= "BPMS:UNDH:890:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:UNDH:890:",
		NEXT	= "BPMS:UNDH:990:SIM_SEQ"
	}
	{
		GROUP	= "0",
		BLOB	= "BPMS:UNDH:990:",
		NEXT	= "BPMS:UNDH:990:ALL_SEND",
	}
}

# Each group needs a SEND record
# LAST should match the truncated BLOB macro
# from above for the last blob in the group
file fcomGroupSend.template
{
	{
		GROUP	= "0",
		LAST	= "BPMS:UNDH:990:",
	}
}
